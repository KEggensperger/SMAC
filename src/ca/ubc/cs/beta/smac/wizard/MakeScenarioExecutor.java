package ca.ubc.cs.beta.smac.wizard;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.DateFormat;
import java.util.Date;
import java.util.EnumMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;
import java.util.TreeMap;

import ca.ubc.cs.beta.aclib.algorithmrun.AlgorithmRun;
import ca.ubc.cs.beta.aclib.configspace.ParamConfigurationSpace;
import ca.ubc.cs.beta.aclib.configspace.ParamFileHelper;
import ca.ubc.cs.beta.aclib.example.tae.TargetAlgorithmEvaluatorRunner;
import ca.ubc.cs.beta.aclib.execconfig.AlgorithmExecutionConfig;
import ca.ubc.cs.beta.aclib.logging.LogLevel;
import ca.ubc.cs.beta.aclib.probleminstance.ProblemInstance;
import ca.ubc.cs.beta.aclib.probleminstance.ProblemInstanceHelper;
import ca.ubc.cs.beta.aclib.probleminstance.ProblemInstanceSeedPair;
import ca.ubc.cs.beta.aclib.runconfig.RunConfig;
import ca.ubc.cs.beta.aclib.targetalgorithmevaluator.TargetAlgorithmEvaluator;
import ca.ubc.cs.beta.aclib.targetalgorithmevaluator.base.cli.CommandLineAlgorithmRun;
import ca.ubc.cs.beta.aclib.targetalgorithmevaluator.base.cli.CommandLineTargetAlgorithmEvaluatorFactory;
import ca.ubc.cs.beta.smac.misc.version.SMACVersionInfo;
import ca.ubc.cs.beta.smac.wizard.questions.Question;
import ca.ubc.cs.beta.smac.wizard.questions.QuestionKeys;
import ca.ubc.cs.beta.smac.wizard.questions.misc.ScenarioNameQuestion;

/**
 * Executor for Make Scenario Wizard
 * @author Steve Ramage <seramage@cs.ubc.ca>
 *
 *
 */
public class MakeScenarioExecutor {

	public static void main(String[] args) throws IOException
	{
		
		System.setProperty("ROOT-LEVEL",LogLevel.INFO.name());

		
		Map<QuestionKeys, String> defaultAnswers = loadLastValues();

		Question q = new ScenarioNameQuestion(defaultAnswers);
		Question last = q;
		
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		do 
		{
			System.out.println(q.getPrompt());
			System.out.print(">");
			System.out.flush();
			last = q;
			q = q.setAnswerAndGetNext(reader.readLine().trim());
			
			saveValues(last.getAllAnswers());
			System.out.println();
			
		} while(q != null);

		Map<QuestionKeys,String> answers = last.getAllAnswers();

		
		File scenarioFile = new File(last.getAllAnswers().get(QuestionKeys.SCENARIO_NAME) + ".txt");
		FileWriter writer = new FileWriter(scenarioFile);
		
		String date = DateFormat.getDateTimeInstance().format(new Date());
		
		writer.write("# Automatically generated scenario made on " + date + "\n");
		writer.write("# Generated by SMAC Version " + (new SMACVersionInfo()).getVersion() + "\n");
		
		
		TreeMap<String, String> scenEntries = new TreeMap<String, String>();
		
		for(Entry<QuestionKeys, String> ent : answers.entrySet())
		{
			if(ent.getKey().getScenarioFileKeyName().trim().length() != 0)
			{
				scenEntries.put(ent.getKey().getScenarioFileKeyName().trim(), ent.getValue());
			}
		}
		
		for(Entry<String, String> ent : scenEntries.entrySet())
		{
			writer.write(ent.getKey() + "=" + ent.getValue() + "\n");
		}

		writer.flush();
		writer.close();
		
		
		
		System.out.println("Scenario file written to: " + scenarioFile.getAbsolutePath());
		
		deleteValues();
		
		System.out.println("Test algorithm run?");
		
		String ans = reader.readLine().trim();
		
		if(ans.length() == 0)
		{
			ans = "Y";
		}
		
		ans = ans.toUpperCase().substring(0, 1);

		if(ans.equals("Y"))
		{
		
			ParamConfigurationSpace configSpace = ParamFileHelper.getParamFileParser(answers.get(QuestionKeys.PCS_FILE));
			
			AlgorithmExecutionConfig execConfig = new AlgorithmExecutionConfig(answers.get(QuestionKeys.EXEC), answers.get(QuestionKeys.EXEC_DIR), configSpace, false, (answers.get(QuestionKeys.DETERMINISTIC).equals("1") ? true : false), Double.valueOf(answers.get(QuestionKeys.CUTOFF_TIME)));
			TargetAlgorithmEvaluator tae = CommandLineTargetAlgorithmEvaluatorFactory.getCLITAE(execConfig);
			List<ProblemInstance> inst = ProblemInstanceHelper.getInstances(answers.get(QuestionKeys.INSTANCE_FILE), new File(".").getAbsolutePath(), false).getInstances();
			
			RunConfig rc = new RunConfig(new ProblemInstanceSeedPair(inst.get(0),1), 5, configSpace.getDefaultConfiguration());
			String call = CommandLineAlgorithmRun.getTargetAlgorithmExecutionCommandAsString(execConfig, rc);
			System.out.println("Call to the target algorithm is as follows:\n" + call);
			
			List<AlgorithmRun> runs = tae.evaluateRun(rc);
			
			
			System.out.println("Algorithm Run Reported: " + runs.get(0).getResultLine());
		}
		
		System.out.println("To execute SMAC you can use:\n --scenario-file " + scenarioFile.getAbsolutePath() + " --num-run 1 --experimentDir " + (new File(".")).getAbsolutePath());
		

	}

	private static final String lastPreferenceFile = ".make-scenario.last";
	private static void saveValues(Map<QuestionKeys, String> allAnswers) 
	{
		Properties tl = new Properties();
		
		for(Entry<QuestionKeys, String> ent : allAnswers.entrySet())
		{
			tl.put(ent.getKey().toString(), ent.getValue());
		}
		
		
		try {
			tl.store(new FileOutputStream(lastPreferenceFile), "Last saved version of file");
		} catch (IOException e) {
			File f = new File(lastPreferenceFile);
			f.delete();
		}
		
	}

	/**
	 * @return
	 * @throws IOException
	 * @throws FileNotFoundException
	 */
	private static Map<QuestionKeys, String> loadLastValues()
			throws IOException, FileNotFoundException {
		
		Map<QuestionKeys, String> defaultAnswers = new EnumMap<QuestionKeys, String>(QuestionKeys.class);
		try {
		Properties tl = new Properties();
		
		tl.load(new FileReader(lastPreferenceFile));
		
		
		
		for(Entry<Object, Object> ent : tl.entrySet())
		{
			defaultAnswers.put(QuestionKeys.valueOf(ent.getKey().toString()), ent.getValue().toString().trim());
		} 
		} catch(IOException e)
		{
			//Don't care if the file doesn't exist or can't be read
		}
		return defaultAnswers;
	}
	
	private static void deleteValues()
	{
		File f = new File(lastPreferenceFile);
		f.delete();
	}
}
