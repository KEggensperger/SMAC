#LyX 1.6.9 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\begin_preamble

\end_preamble
\use_default_options false
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize 10
\spacing single
\use_hyperref false
\papersize letterpaper
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\end_header

\begin_body

\begin_layout Title
Updated Quick start guide for SMAC, version 0.90b
\end_layout

\begin_layout Author
Frank
\begin_inset space ~
\end_inset

Hutter
\begin_inset Newline newline
\end_inset

 Department of Computer Science
\begin_inset Newline newline
\end_inset

 University of British Columbia
\begin_inset Newline newline
\end_inset

 Vancouver, BC
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

V6T
\begin_inset space ~
\end_inset

1Z4, Canada.
 hutter at cs dot ubc dot ca 
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:intro"

\end_inset

 SMAC
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Hut04,HutHooStu07"

\end_inset

 is a tool for parameter optimization.
 It works for any parameterized algorithm whose parameters can be discretized.
 SMAC searches through the space of possible parameter configurations, evaluatin
g configurations by running the algorithm to be optimized on a set of benchmark
 instances.
\end_layout

\begin_layout Standard
Users provide 
\end_layout

\begin_layout Itemize
a parametric algorithm 
\begin_inset Formula $\mathcal{A}$
\end_inset

 (executable to be called from the command line), 
\end_layout

\begin_layout Itemize
all parameters and their possible values (parameters need to be configurable
 from the command line), and 
\end_layout

\begin_layout Itemize
a set of benchmark problems, 
\begin_inset Formula $\mathcal{S}$
\end_inset

.
 
\end_layout

\begin_layout Standard
Users can also choose from a multitude of optimization objectives, reaching
 from minimizing average runtime to maximizing median approximation qualities.
\end_layout

\begin_layout Standard
SMAC then executes algorithm 
\begin_inset Formula $\mathcal{A}$
\end_inset

 with different combinations of parameters on instances sampled from 
\begin_inset Formula $\mathcal{S}$
\end_inset

, searching for the configuration that yields overall best performance across
 the benchmark problems.
 For details, see
\begin_inset space ~
\end_inset

 (To be replaced).
 If you use SMAC in your research, please cite that article.
 It would also be nice if you sent us an email -- we are always interested
 in additional application domains.
\end_layout

\begin_layout Subsection
History
\end_layout

\begin_layout Standard
Blah blah blah Param ILS....
\end_layout

\begin_layout Standard
SMAC was originally written in MATLAB starting in 2008.
 In 2011 several portions of the code base were ported to Java, and in early
 2012 the rest of SMAC was ported to Java.
\end_layout

\begin_layout Section
Download and Configuration
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:config"

\end_inset

 This quick start guide is for 
\series bold
version 0.90b
\series default
 of SMAC.
 It is important to note that this is a preliminary beta release.
 It has not been thoroughly tested and validated yet.
 Download the smac-0.90b.zip file, and unzip it in a new directory.
 Smac is executed by calling 
\emph on
smac,
\emph default
a shell script the default output will output a large amount of configuration
 options only some of which need to be used.
 
\end_layout

\begin_layout Subsection
Configuration Options
\end_layout

\begin_layout Section
Example tuning scenarios
\end_layout

\begin_layout Standard
The zip file contains examples for three algorithms: SAPS
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "HutTomHoo02"

\end_inset

, a local search algorithm for SAT; Spear
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
http://www.cs.ubc.ca/
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
~{}
\end_layout

\end_inset

babic/index_spear.htm, described in some more detail in
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "HutBabHooHu07"

\end_inset


\end_layout

\end_inset

, a tree search algorithm for SAT (and satisfiability modulo theories) developed
 by Domagoj Babic; and the commercial optimization tool ILOG CPLEX
\begin_inset space ~
\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
http://www.ilog.com/products/cplex/
\end_layout

\end_inset

.
 Executables for Saps and Spear are included in the zip file, but CPLEX
 needs to be purchased to run the CPLEX example.
\end_layout

\begin_layout Standard
We include two tuning scenarios for Saps, one for Spear and one for CPLEX.
 In the Spear example, the instance collection is the same as in one of
 the SAPS examples: the algorithm is optimized on 5 graph colouring problem
 instances and tested on five other ones.
 (Note that our examples are toy examples with very small training and test
 data sets; we recommend substantially larger data sets for real applications!)
 The second tuning scenario for Saps optimizes Saps performance for a single
 instance, and tests on the same one, but of course with different seeds
 -- this is useful to study peak performance of an algorithm.
 For CPLEX, we include a tuning scenario for mixed integer programs from
 combinatorial auctions (see 
\begin_inset CommandInset citation
LatexCommand cite
key "LeyPeaSho00"

\end_inset

 for details).
\end_layout

\begin_layout Standard
Type 
\family typewriter
bin/paramils
\family default
 to see the syntax for starting these four examples.
 (You may run an example if you wish - these toy scenarios should take less
 than a minute.) For example, the call for the first scenario is 
\family typewriter
paramils -numRun 0 -scenariofile example_saps/scenario-Saps-SWGCP-sat-small-trai
n-small-test.txt -validN 100
\family default
.
\end_layout

\begin_layout Section
Tuning scenario files
\end_layout

\begin_layout Standard
Note that most information in the above example call is not given on the
 command line, but hidden in a text file description of the tuning scenario,
 in this case example_saps/scenario-Saps-SWGCP-sat-small-train-small-test.txt.
 
\emph on
Tuning scenario files
\emph default
 such as this define a tuning scenario completely, and also contain some
 information about where ParamILS should write its results etc.
 They can contain the following information:
\end_layout

\begin_layout Description
algo An algorithm executable or a call to a wrapper script around an algorithm
 that conforms with the input/output format of ParamILS.
 
\end_layout

\begin_layout Description
execdir Directory to execute 
\family typewriter
<algo>
\family default
 from: 
\begin_inset Quotes eld
\end_inset

cd 
\family typewriter
<execdir>
\family default
; 
\family typewriter
<algo>
\family default

\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout Description
deterministic Set to 0 for randomized algorithms, 1 for deterministic 
\end_layout

\begin_layout Description
run_obj A scalar quantifying how 
\begin_inset Quotes eld
\end_inset

good
\begin_inset Quotes erd
\end_inset

 a single algorithm execution is, such as its required runtime.
 Implemented examples for this include 
\family typewriter
runtime
\family default
, 
\family typewriter
runlength
\family default
, 
\family typewriter
approx
\family default
 (approximation quality, i.e., 1-(optimal quality divided by found quality)),
 
\family typewriter
speedup
\family default
 (speedup over a reference runtime for this instance -- note that for this
 option the reference needs to be defined in the 
\family typewriter
instance_seed_file
\family default
 as covered in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:rest"

\end_inset

).
 Additional objectives for single algorithm executions can be defined by
 modifying function 
\family typewriter
single_run_objective
\family default
 in file 
\family typewriter
algo_specifics.rb
\family default
.
 
\end_layout

\begin_layout Description
overall_obj While 
\family typewriter
run_obj
\family default
 defines the objective function for a single algorithm run, 
\family typewriter
overall_obj
\family default
 defines how those single objectives are combined to reach a single scalar
 value to compare two parameter configurations.
 Implemented examples include 
\family typewriter
mean
\family default
, 
\family typewriter
median
\family default
, 
\family typewriter
q90
\family default
 (the 90% quantile), 
\family typewriter
adj_mean
\family default
 (a version of the mean accounting for unsuccesful runs: total runtime divided
 by number of succesful runs), 
\family typewriter
mean1000
\family default
 (another version of the mean accounting for unsuccessful runs: (total runtime
 of succesful runs + 1000
\begin_inset Formula $\times$
\end_inset

 runtime of unsuccesful runs) divided by number of runs -- this effetively
 maximizes the number of successful runs, breaking ties by the runtime of
 successful runs; it is the criterion I use in most of my experiments),
 and 
\family typewriter
geomean
\family default
 (geometric mean, primarily used in combination with 
\family typewriter
run_obj
\family default
=
\family typewriter
speedup
\family default
.
 The empirical statistic of the cost distribution (across multiple instances
 and seeds) to be minimized, such as the mean (of the single run_objectives).
 
\end_layout

\begin_layout Description
cutoff_time The time after which a single algorithm execution will be terminated
 unsuccesfully.
 This is an important parameter: if choosen too high, lots of time will
 be wasted with unsuccessful runs.
 If chosen too low the optimization is biased to perform well on easy instances
 only.
 
\end_layout

\begin_layout Description
cutoff_length The runlength after which a single algorithm execution will
 be terminated unsuccesfully.
 This length can, e.g.
 be defined in flips for an SLS algorithm or decisions for a tree search.
 
\end_layout

\begin_layout Description
tunerTimeout The timeout of the tuner.
 Validation of the final best found parameter configuration starts after
 the timeout.
 
\end_layout

\begin_layout Description
paramfile Specifies the file with the parameters of the algorithms.
 
\end_layout

\begin_layout Description
outdir Specifies the directory ParamILS should write its results to.
 
\end_layout

\begin_layout Description
instance_file Specifies the file with a list of training instances.
 
\end_layout

\begin_layout Description
test_instance_file Specifies the file with a list of test instances.
 
\end_layout

\begin_layout Description
instance_seed_file Specifies the file with a list of training instance/seed
 pairs -- this and instance_file are mutually exclusive.
 
\end_layout

\begin_layout Description
test_instance_seed_file Specifies the file with a list of training instance/seed
 pairs -- this and test_instance_file are mutually exclusive.
 
\end_layout

\begin_layout Standard
ParamILS writes output about its progress to stdout and also writes to files
 in the specified directory 
\family typewriter
<outdir>
\family default
.
 The file with 
\family typewriter
-log
\family default
 in its name logs ParamILS behaviour, the file with 
\family typewriter
-traj
\family default
 only keeps track of its current best solution trajectory, and the 
\family typewriter
-result
\family default
 file summarizes the final result.
 See section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:output"

\end_inset

 for information on how to read these files.
 Note that for FocusedILS, the quality of the incumbent solution does not
 improve monotonically because the number of runs it is based on varies.
 Solution quality starts at the worst possible value, 
\family typewriter
100000000
\family default
.
 It then typically quickly improves to a very low value because in the beginning
 each evaluation is only based on a single algorithm execution (leading
 to initial over-tuning); as more runs become available the performance
 estimates get more realistic.
 Detailed information about the incumbent configurations found is written
 to the log file.
\end_layout

\begin_layout Standard
In order to get reasonable performance estimates, ParamILS performs multiple
 runs for each configuration.
 These runs can differ in the input instance and the algorithm seed.
 For deterministic algorithms, the runs only differ in their input instances
 (the seed for deterministic algorithms should always be fixed to -1).
 Different input instances and seeds will lead to different results, or
 the same final result being found faster or slower.
 Thus, if multiple CPUs are available for the optimization, we recommend
 to start several copies of ParamILS, differing only in the parameter 
\family typewriter
-numRun
\family default
.
 This is especially important for FocusedILS, whose performance depends
 quite strongly on the order of training instances (and the seeds) used.
\end_layout

\begin_layout Section
Configuration Options
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Option Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Default
\end_layout

\end_inset
</cell>
</row>

<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
B
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
C
\end_layout

\end_inset
</cell>
</row>



<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
D
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
E
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
F
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
--instanceFile","-i"}, description="File containing instances specified
 one instance per line", required=true) public String instanceFile; 
\end_layout

\begin_layout Standard
--rootDir"}, description="Root directory ") public String rootDir = System.getPro
perty("user.dir"); 
\end_layout

\begin_layout Standard
@Parameter(names={"-e","--experimentDir"}, description="Root Directory for
 Experiments Folder") public String experimentDir = System.getProperty("user.dir")
 + File.separator + "experiments"; 
\end_layout

\begin_layout Standard
@Parameter(names={"-p", "--paramFile"}, description="File containing Parameter
 Space of Execution", required=true, converter=ReadableFileConverter.class)
 public File paramFile; 
\end_layout

\begin_layout Standard
@Parameter(names="--seed", description="Seed for Random Number Generator
 [0 means don't use a seed]") public long seed = 0; 
\end_layout

\begin_layout Standard
@Parameter(names="--runObj", description="Objective Type that we are optimizing
 for") public RunObjective runObj = RunObjective.RUNTIME; 
\end_layout

\begin_layout Standard
@Parameter(names="--overallObj", description="Objective Type that we are
 optimizing for") public OverallObjective overallObj = OverallObjective.MEAN;
 
\end_layout

\begin_layout Standard
@Parameter(names="--cutoffTime", description="Cap Time for an Individual
 Run") public int cutoffTime = 300; 
\end_layout

\begin_layout Standard
@Parameter(names="--tunerTimeout", description="Total CPU Time to execute
 for") public int tunerTimeout = Integer.MAX_VALUE;
\end_layout

\begin_layout Standard
@Parameter(names="--runtimeLimit", description = "Total Wall colck time
 to execute for") public int runtimeLimit = Integer.MAX_VALUE; 
\end_layout

\begin_layout Standard
@Parameter(names="--totalNumRunLimit" , description = "Total number of runs
 to execute") public int totalNumRunLimit = Integer.MAX_VALUE; 
\end_layout

\begin_layout Standard
@Parameter(names="--numIterations", description = "Total number of loop
 iterations to perform") public int numIteratations = Integer.MAX_VALUE;
 
\end_layout

\begin_layout Standard
@Parameter(names="--algoExec", description="algorithm call to execute",
 required=true) public String algoExec; 
\end_layout

\begin_layout Standard
@Parameter(names="--numTestInstances", description = "Number of instances
 to test against (Will execute min of this, and number of instances in test
 Instance File)") public int numberOfTestInstances = 10;
\end_layout

\begin_layout Standard
@Parameter(names={"--testInstanceFile","-t"}, description="File containing
 list of test instances (1 per line)", required=true) public String testInstance
File; 
\end_layout

\begin_layout Standard
@Parameter(names="--runHashCodeFile", description="File containing a list
 of Run Hashes one per line (Either with just the format on each line, or
 with the following text per line: 
\backslash
"Run Hash Codes: (Hash Code) After (n) runs
\backslash
".
 The number of runs in this file need not match the number of runs that
 we execute, this file only ensures that the sequences never diverge.
 Note the n is completely ignored so the order they are specified in is
 the order we expect the hash codes in this version", converter=ReadableFileConv
erter.class) public File runHashCodeFile; 
\end_layout

\begin_layout Standard
@Parameter(names="--modelHashCodeFile", description="File containing a list
 of Model Hashes one per line with the following text per line: 
\backslash
"Preprocessed Forest Built With Hash Code: (n)
\backslash
" or 
\backslash
"Random Forest Built with Hash Code: (n)
\backslash
" where (n) is the hashcode", converter=ReadableFileConverter.class) public
 Object modelHashCodeFile; 
\end_layout

\begin_layout Standard
@Parameter(names="--runID", description="String that identifies this run
 for logging purposes") public String runID = "Run-" + (new SimpleDateFormat("yy
yy-MM-dd--HH-mm-ss-SSS")).format(new Date()); 
\end_layout

\begin_layout Standard
@Parameter(names="--outputDirectory", required=true, description="Output
 Directory") public String outputDirectory;
\end_layout

\begin_layout Standard
@Parameter(names="--numPCA", description="Number of prinicipal components
 of features") public int numPCA = 7;
\end_layout

\begin_layout Standard
@Parameter(names="--expectedImprovementFunction", description="Expected
 Improvement Function to Use") public ExpectedImprovementFunctions expFunc
 = ExpectedImprovementFunctions.EXPONENTIAL;
\end_layout

\begin_layout Standard
@Parameter(names="--nuberOfChallengers", description="Number of Challengers
 needed for Local Search", validateWith=PositiveInteger.class) public int
 numberOfChallengers = 10; 
\end_layout

\begin_layout Standard
@Parameter(names="--numberOfRandomConfigsInEI", description="Number of Random
 Configurations to evaluate in EI Search", validateWith=PositiveInteger.class)
 public int numberOfRandomConfigsInEI = 10000; 
\end_layout

\begin_layout Standard
@Parameter(names="--instanceFeatureFile", description="File that contains
 the all the instances features") public String instanceFeatureFile;
\end_layout

\begin_layout Standard
@Parameter(names="--stateSerializer", description="Controls how the state
 will be saved to disk") public StateSerializers stateSerializer = StateSerializ
ers.LEGACY;
\end_layout

\begin_layout Standard
@Parameter(names="--stateDeserializer", description="Controls how the state
 will be saved to disk") public StateSerializers statedeSerializer = StateSerial
izers.LEGACY;
\end_layout

\begin_layout Standard
@Parameter(names="--restoreStateFrom", description="The Location (State
 Deserializer Dependent) of States") public String restoreStateFrom = null;
 
\end_layout

\begin_layout Standard
@Parameter(names="--restoreIteration", description="The Iteration to Restore")
 public Integer restoreIteration = null; 
\end_layout

\begin_layout Standard
@Parameter(names="--executionMode", description="Mode of Automatic Configurator
 to run") public ExecutionMode execMode = ExecutionMode.SMAC; 
\end_layout

\begin_layout Standard
@ParametersDelegate public RandomForestConfig randomForestConfig = new RandomFor
estConfig();
\end_layout

\begin_layout Standard
@Parameter(names="--adaptiveCapping", description="Enable Adaptive Capping")
 public boolean adaptiveCapping = false;
\end_layout

\begin_layout Standard
@Parameter(names="--capSlack", description="Amount to scale computed cap
 time of challengers by") public double capSlack = 1.3; 
\end_layout

\begin_layout Standard
@Parameter(names="--capAddSlack", description="Amount to increase computed
 cap time of challengers by [ general formula: capTime = capSlack*computedCapTim
e + capAddSlack ]") public double capAddSlack = 1; 
\end_layout

\begin_layout Standard
@Parameter(names="--imputationIterations", description="Amount of times
 to impute censored data") public int imputationIterations = 10; 
\end_layout

\begin_layout Standard
@Parameter(names="--maxConcurrentAlgoExecs", description="Maximum number
 of concurrent target algorithm executions", validateWith=PositiveInteger.class)
 public int maxConcurrentAlgoExecs = 1; 
\end_layout

\begin_layout Section
Using Instance-Specific information
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:rest"

\end_inset

 Whether you choose to provide an instance_file (i.e.
 a list of problem instance filenames), or an instance_seed_file (i.e.
 a list of pairs of problem instance filenames and seeds), you specify one
 instance per line.
 You may choose to include additional information after the instance filename,
 such as the optimal solution quality for the instance, or the instance
 hardness for one or more other algorithms.
 Thus, the syntax for each line of the instance_file is 
\family typewriter
<instance_filename> <rest>
\family default
, where 
\family typewriter
<rest>
\family default
 is an arbitrary (possibly empty) string; when using an the instance_seed_file,
 the syntax is 
\family typewriter
<seed> <instance_filename> <rest>
\family default
 The syntax for these files allows you to do this easily: the 
\family typewriter
<rest>
\family default
 string is always parsed and passed on to the objective function computation.
 The rest may, for example, specify a reference runtime (or runlength, or
 whatever) for the instance.
 This is very useful if the objective is to beat a competing algorithm,
 or a previous version of the same algorithm (In my opinion, this objective
 is used too much in computer science research, but since the demand is
 there I provide the option).
 The single run objective 
\family typewriter
speedup
\family default
 is currently the only objective function using this reference value, but
 you are welcome to implemente additional objective functions (using paramils2.2-
source.zip).
\end_layout

\begin_layout Section
Running ParamILS for your own code
\end_layout

\begin_layout Standard
In order to employ ParamILS to optimize your own code, you need to provide
 instance lists in the same format as in the above example, provide a file
 listing your algorithm's parameters in a predefined format, and match the
 required input/output format.
 These two latter points are covered in this section.
\end_layout

\begin_layout Subsection
Algorithm parameter file
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:paramsfile"

\end_inset

 I recommend you create a separate subdirectory for each algorithm you want
 to optimize.
 The parameters of your algorithm need to be defined in a file e.g.
 called 
\family typewriter
params.txt
\family default
.
\end_layout

\begin_layout Standard
This file consists of three parts: basic parameters, specification of conditiona
l parameters, and forbidden parameter combinations, where each of the the
 latter two can be empty.
 (Examples for such files can be found in the example directories.) In the
 first part, each line lists one parameter, in curly parentheses the possible
 values considered, and in square parentheses the default value.
 In the second part, conditional parameters that are only active when some
 higher-level parameters take on certain values are specified as follows:
 conditional_param | higher_level_param in 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

values for higher_level_param that allow conditional_param to be active,
 separated by commas
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

.
 In the third part, forbidden combinations of parameters may be listed.
 These forbidden combinations are listed one per line, in curly parentheses
 in the form: 
\family typewriter
{param1=value1,param2=value2,...}
\family default
.
\end_layout

\begin_layout Subsection
Algorithm executable / wrapper
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:exec-spec"

\end_inset

 The algorithm executable must comply with the following input/output criteria.
 It is called as:
\begin_inset Newline newline
\end_inset

 
\family typewriter
<algo_exectuable> <instance_name> <instance-specific information> <cutoff_time>
 <cutoff_length> <seed> <params>
\family default

\begin_inset Newline newline
\end_inset

 and outputs (possibly amongst others) a line
\begin_inset Newline newline
\end_inset

 
\family typewriter
Result for ParamILS: <solved>, <runtime>, <runlength>, <best_sol>, <seed>
\family default

\begin_inset Newline newline
\end_inset

 containing information about the algorithm execution.
\end_layout

\begin_layout Standard
The part 
\family typewriter
<instance-specific information>
\family default
 is a string in double quotes containing exactly the 
\family typewriter
<rest>
\family default
 string for the current instance that was discussed in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:rest"

\end_inset

.
 Thus, for example, when no additional instance information is provided
 for an instance in the instance_file/instance_seed_file, this part is the
 empty string: "".
\end_layout

\begin_layout Standard
As for the output, 
\family typewriter
<solved>
\family default
 can be either of the strings 
\begin_inset Quotes eld
\end_inset

SAT
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

UNSAT
\begin_inset Quotes erd
\end_inset

, or 
\begin_inset Quotes eld
\end_inset

TIMEOUT
\begin_inset Quotes erd
\end_inset

; 
\family typewriter
<best_sol>
\family default
 is the best solution found (for SAT, the lowest number of unsatisfied clauses),
 and the other fields should be self-explanatory.
 It is important to output a value for each of these fields, even if they
 don't make sense for your algorithm (just output e.g.
 -1 in that case; for the seed, please output the value that is passed as
 an input -- everything else will lead to an error).
 If you don't want to change your algorithm output, you can write a simple
 wrapper around it; I did this for the SAPS example above.
 In fact, a wrapper could reuse most parts of that SAPS wrapper.
 If you want to write a simple ruby wrapper around your algorithm executable,
 have a look at 
\family typewriter
saps_wrapper.rb
\family default
 in directory 
\family typewriter
example_saps
\family default
.
 Note that this wrapper by no means needs to be written in Ruby -- this
 is just the scripting language I am most comfortable with.
 In fact, you do not require a Ruby installation at all to run ParamILS
 when you use the Linux executable discussed above.
\end_layout

\begin_layout Section
Interpreting ParamILS's Output
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:output"

\end_inset

 The most important output file is the log file, which has 
\family typewriter
-log
\family default
 and some other information about the run's parameters in its file name.
 A file name could for example be 
\family typewriter
focused-runs2000-runobjruntime-overallobjmean-time5.0
\family default
 
\family typewriter
-tunerTime18000.0-algospear1.2.1.1-log_0.txt
\family default
; this logs the output of a FocusedILS run optimizing the performance of
 Spear using up to 2000 runs to judge the quality of a parameter configuration
 (which is the default), minimizing mean runtime with a cutoff of 5.0 seconds
 per run and a tuner time of 18,000s = 5h.
 The 
\family typewriter
_0
\family default
 indicates that this run is using instance/seed file 
\family typewriter
_0
\family default
; performance with different instance/seed files can vary substantially.
 A lot of information is written to the log file to enable reconstruction
 of the entire trajectory a ParamILS run has taken; the most important informati
on for users is contained in lines like the following: 
\family typewriter
New Incumbent: <runtime>, <incumbent quality> [<number of runs this incumbent
 is based on>, <cutoff time per run>].
 With state <parameter configuration>
\family default
.
 The first such line will read 
\family typewriter
New Incumbent: 0, 100000000 [0, 0].
 With state <default>
\family default
; this indicates that at time zero the incumbent is simply the default configura
tion (user-specified in the algorithm parameter file, see Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:paramsfile"

\end_inset

).
 Since ParamILS starts with a run on the initial configuration, the next
 such line will read 
\family typewriter
New Incumbent: <runtime for the first run>, <quality of the first run> [1,
 <cutoff time per run>].
 With state <default>
\family default
.
 The fields 
\family typewriter
<runtime for the first run>
\family default
 and 
\family typewriter
<number of runs this incumbent is based on>
\family default
 are monotonically increasing; that is, once ParamILS has found an incumbent
 based on 
\begin_inset Formula $N$
\end_inset

 runs, all future incumbents will be based on 
\begin_inset Formula $\ge N$
\end_inset

 runs.
 The field 
\family typewriter
<incumbent quality>
\family default
, however, is 
\emph on
not
\emph default
 monotonically decreasing (improving).
 In constrast, it is almost always the case that initial performance estimates
 are optimistic (when based on a very small number of runs) and become more
 reliable when based on larger number of runs later on in the trajectory.
\end_layout

\begin_layout Standard
At any given time during a ParamILS run, in order to find the best configuration
 found so far, you can inspect the logfile and do a text search for 
\family typewriter
New Incumbent:
\family default
; the last match will list the best configuration found thus far.
 The trajectory file (same filename as logfile, but 
\family typewriter
-log
\family default
 replaced by 
\family typewriter
-traj
\family default
) only keeps track of the quality of the incumbent at any given time.
 Its entries are 
\family typewriter
<runtime>, <incumbent quality>, <number of runs this incumbent is based
 on>, <iteration number of ParamILS>, <cutoff time per run>, <value of incumbent
 parameters, (sorted & comma-separated)>
\family default
.
 So if you want to get a quick idea about tuning progress, the 
\family typewriter
-traj
\family default
 file can be helpful, but in order to see the incumbent configuration in
 a readable way please refer to the 
\family typewriter
-log
\family default
 file.
\end_layout

\begin_layout Section
Usage Differences Between This and Other Versions
\end_layout

\begin_layout Standard
This section is primarily for users of ParamILS, but also the MATLAB version
 of SMAC and outlines some of the differences.
\end_layout

\begin_layout Subsection
Configuration Changes
\end_layout

\begin_layout Standard
Everything needed to execute SMAC is specified on the Command Line.
 Certain configuration options allow you to specify files, for instance
 a scenario file.
 While most existing scenario files should work without a hitch it's important
 to note that what is actually happening is that it is just being parsed
 into Command Line options.
 You could in theory specify other configuration options in a scenario file,
 and they would be set accordingly.
\end_layout

\begin_layout Standard
While the previous version of SMAC, and ParamILS supported
\end_layout

\begin_layout Section
Known problems
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:problems"

\end_inset


\end_layout

\begin_layout Enumerate
You cannot override options on the command line specified in files 
\end_layout

\begin_layout Enumerate
Validation of configuration options is poor and limited
\end_layout

\begin_layout Enumerate
Instance Specific Information is not supported.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%
\backslash
section{Extensions}
\backslash
label{sec:extensions}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%I personally use ParamILS in combination with a MySQL database in which
 I store the results of algorithm executions, such that I can quickly
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%repeat previous runs of ParamILS.
 However, for most end users, this would be way too much overhead, so I
 do not support this component.
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%If your algorithm runs are very costly, you may think about saving some
 results, though, e.g.
 in a text file.
 
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%For big jobs, you may also think about parallelizing runs on a cluster
 of machines.
 For this, I have used a tool called 
\backslash
emph{jobserver}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%by Christian Bang; jobserver is freely available at 
\backslash
texttt{http://rubyforge.org/projects/jobserver/}.
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
bibliographystyle{plain}
\end_layout

\end_inset

 
\size footnotesize

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

 
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "short,frankbib"

\end_inset


\end_layout

\begin_layout Standard

\size footnotesize
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

document
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
