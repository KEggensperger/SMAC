#LyX file created by tex2lyx 1.6.9
\lyxformat 264
\begin_document
\begin_header
\textclass article
\begin_preamble



\end_preamble
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize 10
\spacing single
\papersize letterpaper
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\end_header

\begin_body

\begin_layout Title

Updated Quick start guide for ParamILS, version 2.2
\end_layout

\begin_layout Author

 Frank\InsetSpace ~
Hutter
\newline
 Department of Computer Science
\newline
 University of British Columbia
\newline
 Vancouver, BC\InsetSpace \space{}
\InsetSpace \space{}
V6T\InsetSpace ~
1Z4, Canada. hutter at cs dot ubc dot ca 
\end_layout

\begin_layout Section

Introduction
\end_layout

\begin_layout Standard


\begin_inset LatexCommand label
name "sec:intro"

\end_inset

 ParamILS\InsetSpace ~

\begin_inset LatexCommand cite
after ""
key "Hut04,HutHooStu07"

\end_inset

 is a tool for parameter optimization. It works for any parameterized algorithm whose parameters can be discretized. ParamILS searches through the space of possible parameter configurations, evaluating configurations by running the algorithm to be optimized on a set of benchmark instances.
\end_layout

\begin_layout Standard

Users provide 
\end_layout

\begin_layout Itemize

a parametric algorithm 
\begin_inset Formula $\mathcal{A}$
\end_inset

 (executable to be called from the command line), 
\end_layout

\begin_layout Itemize

all parameters and their possible values (parameters need to be configurable from the command line), and 
\end_layout

\begin_layout Itemize

a set of benchmark problems, 
\begin_inset Formula $\mathcal{S}$
\end_inset

. 
\end_layout

\begin_layout Standard

Users can also choose from a multitude of optimization objectives, reaching from minimizing average runtime to maximizing median approximation qualities.
\end_layout

\begin_layout Standard

ParamILS then executes algorithm 
\begin_inset Formula $\mathcal{A}$
\end_inset

 with different combinations of parameters on instances sampled from 
\begin_inset Formula $\mathcal{S}$
\end_inset

, searching for the configuration that yields overall best performance across the benchmark problems. For details, see\InsetSpace ~

\begin_inset LatexCommand cite
after ""
key "HutHooStu07"

\end_inset

. If you use ParamILS in your research, please cite that article. It would also be nice if you sent us an email -- we are always interested in additional application domains.
\end_layout

\begin_layout Section

Download and Configuration
\end_layout

\begin_layout Standard


\begin_inset LatexCommand label
name "sec:config"

\end_inset

 This quick start guide is for 
\series bold
version 2.2
\series default
 of ParamILS. There is also an older quick start guide for version 1.0. Compared to that version, the user interface has been much improved.
\end_layout

\begin_layout Standard

Download the zip file paramils2.2.zip from http://www.cs.ubc.ca/labs/beta/Projects/ParamILS and unzip it in a new directory. The version in this zip file is a Linux executable, and currently such an executable is only available for Linux. If you wish to use ParamILS for other platforms, you can do so, but you will have to download the source code version (paramils2.2-source.zip), and probably fiddle with path issues etc. (see the quick start guide for version 1.0)
\end_layout

\begin_layout Standard

ParamILS is written in Ruby. Ruby is a scripting language similar to Perl, but object-oriented and 
\emph on
a lot
\emph default
 easier to read -- Ruby can be freely downloaded for all platforms from 
\family typewriter
http://www.ruby-lang.org/en/
\family default
. The executable above has been generated with RubyScript2Exe
\begin_inset Foot
status collapsed


\begin_layout Standard

http://www.erikveen.dds.nl/rubyscript2exe/index.html
\end_layout

\end_inset

.
\end_layout

\begin_layout Section

Example tuning scenarios
\end_layout

\begin_layout Standard

The zip file contains examples for three algorithms: SAPS\InsetSpace ~

\begin_inset LatexCommand cite
after ""
key "HutTomHoo02"

\end_inset

, a local search algorithm for SAT; Spear
\begin_inset Foot
status collapsed


\begin_layout Standard

http://www.cs.ubc.ca/
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
~{}
\end_layout

\end_inset

babic/index_spear.htm, described in some more detail in\InsetSpace ~

\begin_inset LatexCommand cite
after ""
key "HutBabHooHu07"

\end_inset


\end_layout

\end_inset

, a tree search algorithm for SAT (and satisfiability modulo theories) developed by Domagoj Babic; and the commercial optimization tool ILOG CPLEX\InsetSpace ~

\begin_inset Foot
status collapsed


\begin_layout Standard

http://www.ilog.com/products/cplex/
\end_layout

\end_inset

. Executables for Saps and Spear are included in the zip file, but CPLEX needs to be purchased to run the CPLEX example.
\end_layout

\begin_layout Standard

We include two tuning scenarios for Saps, one for Spear and one for CPLEX. In the Spear example, the instance collection is the same as in one of the SAPS examples: the algorithm is optimized on 5 graph colouring problem instances and tested on five other ones. (Note that our examples are toy examples with very small training and test data sets; we recommend substantially larger data sets for real applications!) The second tuning scenario for Saps optimizes Saps performance for a single instance, and tests on the same one, but of course with different seeds -- this is useful to study peak performance of an algorithm. For CPLEX, we include a tuning scenario for mixed integer programs from combinatorial auctions (see 
\begin_inset LatexCommand cite
after ""
key "LeyPeaSho00"

\end_inset

 for details).
\end_layout

\begin_layout Standard

Type 
\family typewriter
bin/paramils
\family default
 to see the syntax for starting these four examples. (You may run an example if you wish - these toy scenarios should take less than a minute.) For example, the call for the first scenario is 
\family typewriter
paramils -numRun 0 -scenariofile example_saps/scenario-Saps-SWGCP-sat-small-train-small-test.txt -validN 100
\family default
.
\end_layout

\begin_layout Section

Tuning scenario files
\end_layout

\begin_layout Standard

Note that most information in the above example call is not given on the command line, but hidden in a text file description of the tuning scenario, in this case example_saps/scenario-Saps-SWGCP-sat-small-train-small-test.txt. 
\emph on
Tuning scenario files
\emph default
 such as this define a tuning scenario completely, and also contain some information about where ParamILS should write its results etc. They can contain the following information:
\end_layout

\begin_layout Description

algo An algorithm executable or a call to a wrapper script around an algorithm that conforms with the input/output format of ParamILS. 
\end_layout

\begin_layout Description

execdir Directory to execute 
\family typewriter
<algo>
\family default
 from: 
\begin_inset Quotes eld
\end_inset

cd 
\family typewriter
<execdir>
\family default
; 
\family typewriter
<algo>
\family default

\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout Description

deterministic Set to 0 for randomized algorithms, 1 for deterministic 
\end_layout

\begin_layout Description

run_obj A scalar quantifying how 
\begin_inset Quotes eld
\end_inset

good
\begin_inset Quotes erd
\end_inset

 a single algorithm execution is, such as its required runtime. Implemented examples for this include 
\family typewriter
runtime
\family default
, 
\family typewriter
runlength
\family default
, 
\family typewriter
approx
\family default
 (approximation quality, i.e., 1-(optimal quality divided by found quality)), 
\family typewriter
speedup
\family default
 (speedup over a reference runtime for this instance -- note that for this option the reference needs to be defined in the 
\family typewriter
instance_seed_file
\family default
 as covered in Section 
\begin_inset LatexCommand ref
reference "sec:rest"

\end_inset

). Additional objectives for single algorithm executions can be defined by modifying function 
\family typewriter
single_run_objective
\family default
 in file 
\family typewriter
algo_specifics.rb
\family default
. 
\end_layout

\begin_layout Description

overall_obj While 
\family typewriter
run_obj
\family default
 defines the objective function for a single algorithm run, 
\family typewriter
overall_obj
\family default
 defines how those single objectives are combined to reach a single scalar value to compare two parameter configurations. Implemented examples include 
\family typewriter
mean
\family default
, 
\family typewriter
median
\family default
, 
\family typewriter
q90
\family default
 (the 90% quantile), 
\family typewriter
adj_mean
\family default
 (a version of the mean accounting for unsuccesful runs: total runtime divided by number of succesful runs), 
\family typewriter
mean1000
\family default
 (another version of the mean accounting for unsuccessful runs: (total runtime of succesful runs + 1000
\begin_inset Formula $\times$
\end_inset

 runtime of unsuccesful runs) divided by number of runs -- this effetively maximizes the number of successful runs, breaking ties by the runtime of successful runs; it is the criterion I use in most of my experiments), and 
\family typewriter
geomean
\family default
 (geometric mean, primarily used in combination with 
\family typewriter
run_obj
\family default
=
\family typewriter
speedup
\family default
. The empirical statistic of the cost distribution (across multiple instances and seeds) to be minimized, such as the mean (of the single run_objectives). 
\end_layout

\begin_layout Description

cutoff_time The time after which a single algorithm execution will be terminated unsuccesfully. This is an important parameter: if choosen too high, lots of time will be wasted with unsuccessful runs. If chosen too low the optimization is biased to perform well on easy instances only. 
\end_layout

\begin_layout Description

cutoff_length The runlength after which a single algorithm execution will be terminated unsuccesfully. This length can, e.g. be defined in flips for an SLS algorithm or decisions for a tree search. 
\end_layout

\begin_layout Description

tunerTimeout The timeout of the tuner. Validation of the final best found parameter configuration starts after the timeout. 
\end_layout

\begin_layout Description

paramfile Specifies the file with the parameters of the algorithms. 
\end_layout

\begin_layout Description

outdir Specifies the directory ParamILS should write its results to. 
\end_layout

\begin_layout Description

instance_file Specifies the file with a list of training instances. 
\end_layout

\begin_layout Description

test_instance_file Specifies the file with a list of test instances. 
\end_layout

\begin_layout Description

instance_seed_file Specifies the file with a list of training instance/seed pairs -- this and instance_file are mutually exclusive. 
\end_layout

\begin_layout Description

test_instance_seed_file Specifies the file with a list of training instance/seed pairs -- this and test_instance_file are mutually exclusive. 
\end_layout

\begin_layout Standard

ParamILS writes output about its progress to stdout and also writes to files in the specified directory 
\family typewriter
<outdir>
\family default
. The file with 
\family typewriter
-log
\family default
 in its name logs ParamILS behaviour, the file with 
\family typewriter
-traj
\family default
 only keeps track of its current best solution trajectory, and the 
\family typewriter
-result
\family default
 file summarizes the final result. See section 
\begin_inset LatexCommand ref
reference "sec:output"

\end_inset

 for information on how to read these files. Note that for FocusedILS, the quality of the incumbent solution does not improve monotonically because the number of runs it is based on varies. Solution quality starts at the worst possible value, 
\family typewriter
100000000
\family default
. It then typically quickly improves to a very low value because in the beginning each evaluation is only based on a single algorithm execution (leading to initial over-tuning); as more runs become available the performance estimates get more realistic. Detailed information about the incumbent configurations found is written to the log file.
\end_layout

\begin_layout Standard

In order to get reasonable performance estimates, ParamILS performs multiple runs for each configuration. These runs can differ in the input instance and the algorithm seed. For deterministic algorithms, the runs only differ in their input instances (the seed for deterministic algorithms should always be fixed to -1). Different input instances and seeds will lead to different results, or the same final result being found faster or slower. Thus, if multiple CPUs are available for the optimization, we recommend to start several copies of ParamILS, differing only in the parameter 
\family typewriter
-numRun
\family default
. This is especially important for FocusedILS, whose performance depends quite strongly on the order of training instances (and the seeds) used.
\end_layout

\begin_layout Section

Configurable parameters
\end_layout

\begin_layout Standard
\noindent


\begin_inset ERT
status collapsed

\begin_layout Standard

{}
\end_layout

\end_inset

There are a number of configurable parameters the user can set:
\end_layout

\begin_layout Description

maxEvals The number of algorithm executions after which the optimization is terminated. 
\end_layout

\begin_layout Description

maxIts The number of ILS iterations after which the optimization is terminated. 
\end_layout

\begin_layout Description

approach Use 
\family typewriter
basic
\family default
 for BasicILS, 
\family typewriter
focused
\family default
 for FocusedILS, and 
\family typewriter
random
\family default
 for random search. 
\end_layout

\begin_layout Description

N For BasicILS, N is the number of runs to perform to evaluate each parameter configuration. For FocusedILS, it is the 
\emph on
maximal
\emph default
 number of runs to perform to evaluate a parameter configuration. 
\end_layout

\begin_layout Standard

There is also a number of internal parameters that control the heuristics in ParamILS. 
\begin_inset ERT
status collapsed

\begin_layout Standard

% Not up to date.
\end_layout

\begin_layout Standard


\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

%
\backslash
begin{description}
\end_layout

\begin_layout Standard


\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

%	
\backslash
item[R] ParamILS internal parameter: The number of random configurations evaluated at the start of ParamILS.
\end_layout

\begin_layout Standard


\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

%	
\backslash
item[pertubation
\backslash
_strength
\backslash
_basic] ParamILS internal parameter: The pertubation strength of ParamILS.
\end_layout

\begin_layout Standard


\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

%	
\backslash
item[pertubation
\backslash
_strength
\backslash
_scaling] ParamILS internal parameter: If set to 1, the pertubation strength is the maximum of the basic pertubation strength and the basic pertubation strength multiplied by the number of parameters divided by 10. 
\end_layout

\begin_layout Standard


\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

%	
\backslash
item[p
\backslash
_restart] ParamILS internal parameter: The probability of restarting from a random configuration at the end of an iteration of ParamILS.
\end_layout

\begin_layout Standard


\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

%
\backslash
end{description}
\end_layout

\begin_layout Standard


\end_layout

\end_inset


\end_layout

\begin_layout Section

Using Instance-Specific information
\end_layout

\begin_layout Standard


\begin_inset LatexCommand label
name "sec:rest"

\end_inset

 Whether you choose to provide an instance_file (i.e. a list of problem instance filenames), or an instance_seed_file (i.e. a list of pairs of problem instance filenames and seeds), you specify one instance per line. You may choose to include additional information after the instance filename, such as the optimal solution quality for the instance, or the instance hardness for one or more other algorithms. Thus, the syntax for each line of the instance_file is 
\family typewriter
<instance_filename> <rest>
\family default
, where 
\family typewriter
<rest>
\family default
 is an arbitrary (possibly empty) string; when using an the instance_seed_file, the syntax is 
\family typewriter
<seed> <instance_filename> <rest>
\family default
 The syntax for these files allows you to do this easily: the 
\family typewriter
<rest>
\family default
 string is always parsed and passed on to the objective function computation. The rest may, for example, specify a reference runtime (or runlength, or whatever) for the instance. This is very useful if the objective is to beat a competing algorithm, or a previous version of the same algorithm (In my opinion, this objective is used too much in computer science research, but since the demand is there I provide the option). The single run objective 
\family typewriter
speedup
\family default
 is currently the only objective function using this reference value, but you are welcome to implemente additional objective functions (using paramils2.2-source.zip).
\end_layout

\begin_layout Section

Running ParamILS for your own code
\end_layout

\begin_layout Standard

In order to employ ParamILS to optimize your own code, you need to provide instance lists in the same format as in the above example, provide a file listing your algorithm's parameters in a predefined format, and match the required input/output format. These two latter points are covered in this section.
\end_layout

\begin_layout Subsection

Algorithm parameter file
\end_layout

\begin_layout Standard


\begin_inset LatexCommand label
name "sec:paramsfile"

\end_inset

 I recommend you create a separate subdirectory for each algorithm you want to optimize. The parameters of your algorithm need to be defined in a file e.g. called 
\family typewriter
params.txt
\family default
.
\end_layout

\begin_layout Standard

This file consists of three parts: basic parameters, specification of conditional parameters, and forbidden parameter combinations, where each of the the latter two can be empty. (Examples for such files can be found in the example directories.) In the first part, each line lists one parameter, in curly parentheses the possible values considered, and in square parentheses the default value. In the second part, conditional parameters that are only active when some higher-level parameters take on certain values are specified as follows: conditional_param | higher_level_param in 
\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

values for higher_level_param that allow conditional_param to be active, separated by commas
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. In the third part, forbidden combinations of parameters may be listed. These forbidden combinations are listed one per line, in curly parentheses in the form: 
\family typewriter
{param1=value1,param2=value2,...}
\family default
.
\end_layout

\begin_layout Subsection

Algorithm executable / wrapper
\end_layout

\begin_layout Standard


\begin_inset LatexCommand label
name "sec:exec-spec"

\end_inset

 The algorithm executable must comply with the following input/output criteria. It is called as:
\newline
 
\family typewriter
<algo_exectuable> <instance_name> <instance-specific information> <cutoff_time> <cutoff_length> <seed> <params>
\family default

\newline
 and outputs (possibly amongst others) a line
\newline
 
\family typewriter
Result for ParamILS: <solved>, <runtime>, <runlength>, <best_sol>, <seed>
\family default

\newline
 containing information about the algorithm execution.
\end_layout

\begin_layout Standard

The part 
\family typewriter
<instance-specific information>
\family default
 is a string in double quotes containing exactly the 
\family typewriter
<rest>
\family default
 string for the current instance that was discussed in Section 
\begin_inset LatexCommand ref
reference "sec:rest"

\end_inset

. Thus, for example, when no additional instance information is provided for an instance in the instance_file/instance_seed_file, this part is the empty string: "".
\end_layout

\begin_layout Standard

As for the output, 
\family typewriter
<solved>
\family default
 can be either of the strings 
\begin_inset Quotes eld
\end_inset

SAT
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

UNSAT
\begin_inset Quotes erd
\end_inset

, or 
\begin_inset Quotes eld
\end_inset

TIMEOUT
\begin_inset Quotes erd
\end_inset

; 
\family typewriter
<best_sol>
\family default
 is the best solution found (for SAT, the lowest number of unsatisfied clauses), and the other fields should be self-explanatory. It is important to output a value for each of these fields, even if they don't make sense for your algorithm (just output e.g. -1 in that case; for the seed, please output the value that is passed as an input -- everything else will lead to an error). If you don't want to change your algorithm output, you can write a simple wrapper around it; I did this for the SAPS example above. In fact, a wrapper could reuse most parts of that SAPS wrapper. If you want to write a simple ruby wrapper around your algorithm executable, have a look at 
\family typewriter
saps_wrapper.rb
\family default
 in directory 
\family typewriter
example_saps
\family default
. Note that this wrapper by no means needs to be written in Ruby -- this is just the scripting language I am most comfortable with. In fact, you do not require a Ruby installation at all to run ParamILS when you use the Linux executable discussed above.
\end_layout

\begin_layout Section

Interpreting ParamILS's Output
\end_layout

\begin_layout Standard


\begin_inset LatexCommand label
name "sec:output"

\end_inset

 The most important output file is the log file, which has 
\family typewriter
-log
\family default
 and some other information about the run's parameters in its file name. A file name could for example be 
\family typewriter
focused-runs2000-runobjruntime-overallobjmean-time5.0
\family default
 
\family typewriter
-tunerTime18000.0-algospear1.2.1.1-log_0.txt
\family default
; this logs the output of a FocusedILS run optimizing the performance of Spear using up to 2000 runs to judge the quality of a parameter configuration (which is the default), minimizing mean runtime with a cutoff of 5.0 seconds per run and a tuner time of 18,000s = 5h. The 
\family typewriter
_0
\family default
 indicates that this run is using instance/seed file 
\family typewriter
_0
\family default
; performance with different instance/seed files can vary substantially. A lot of information is written to the log file to enable reconstruction of the entire trajectory a ParamILS run has taken; the most important information for users is contained in lines like the following: 
\family typewriter
New Incumbent: <runtime>, <incumbent quality> [<number of runs this incumbent is based on>, <cutoff time per run>]. With state <parameter configuration>
\family default
. The first such line will read 
\family typewriter
New Incumbent: 0, 100000000 [0, 0]. With state <default>
\family default
; this indicates that at time zero the incumbent is simply the default configuration (user-specified in the algorithm parameter file, see Section 
\begin_inset LatexCommand ref
reference "sec:paramsfile"

\end_inset

). Since ParamILS starts with a run on the initial configuration, the next such line will read 
\family typewriter
New Incumbent: <runtime for the first run>, <quality of the first run> [1, <cutoff time per run>]. With state <default>
\family default
. The fields 
\family typewriter
<runtime for the first run>
\family default
 and 
\family typewriter
<number of runs this incumbent is based on>
\family default
 are monotonically increasing; that is, once ParamILS has found an incumbent based on 
\begin_inset Formula $N$
\end_inset

 runs, all future incumbents will be based on 
\begin_inset Formula $\ge N$
\end_inset

 runs. The field 
\family typewriter
<incumbent quality>
\family default
, however, is 
\emph on
not
\emph default
 monotonically decreasing (improving). In constrast, it is almost always the case that initial performance estimates are optimistic (when based on a very small number of runs) and become more reliable when based on larger number of runs later on in the trajectory.
\end_layout

\begin_layout Standard

At any given time during a ParamILS run, in order to find the best configuration found so far, you can inspect the logfile and do a text search for 
\family typewriter
New Incumbent:
\family default
; the last match will list the best configuration found thus far. The trajectory file (same filename as logfile, but 
\family typewriter
-log
\family default
 replaced by 
\family typewriter
-traj
\family default
) only keeps track of the quality of the incumbent at any given time. Its entries are 
\family typewriter
<runtime>, <incumbent quality>, <number of runs this incumbent is based on>, <iteration number of ParamILS>, <cutoff time per run>, <value of incumbent parameters, (sorted & comma-separated)>
\family default
. So if you want to get a quick idea about tuning progress, the 
\family typewriter
-traj
\family default
 file can be helpful, but in order to see the incumbent configuration in a readable way please refer to the 
\family typewriter
-log
\family default
 file.
\end_layout

\begin_layout Section

Known problems
\end_layout

\begin_layout Standard


\begin_inset LatexCommand label
name "sec:problems"

\end_inset


\end_layout

\begin_layout Standard

ParamILS 2.2 implements a pruning criterion that often terminates runs before the cutoff time when their result will not affect ParamILS's further trajectory much or at all. This pruning criterion has only been implemented for tuning 
\family typewriter
mean
\family default
 performance, and assumes non-negative values of the objective function. If you are using 
\family typewriter
median
\family default
 performance or your objective function can take on negative values, please de-activate the pruning using 
\family typewriter
-pruning 0
\family default
 in the command line call to ParamILS.
\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard

%
\backslash
section{Extensions}
\backslash
label{sec:extensions}
\end_layout

\begin_layout Standard


\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

%I personally use ParamILS in combination with a MySQL database in which I store the results of algorithm executions, such that I can quickly
\end_layout

\begin_layout Standard


\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

%repeat previous runs of ParamILS. However, for most end users, this would be way too much overhead, so I do not support this component.
\end_layout

\begin_layout Standard


\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

%If your algorithm runs are very costly, you may think about saving some results, though, e.g. in a text file. 
\end_layout

\begin_layout Standard


\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

%For big jobs, you may also think about parallelizing runs on a cluster of machines. For this, I have used a tool called 
\backslash
emph{jobserver}
\end_layout

\begin_layout Standard


\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

%by Christian Bang; jobserver is freely available at 
\backslash
texttt{http://rubyforge.org/projects/jobserver/}.
\end_layout

\begin_layout Standard


\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
bibliographystyle{plain}
\end_layout

\end_inset

 
\size footnotesize

\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

 
\begin_inset LatexCommand bibtex
bibfiles "short,frankbib"

\end_inset


\end_layout

\begin_layout Standard

\size footnotesize


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

document
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
