<?xml version="1.0"?>
<project name="smac" default="deploy">
	<property name="private.buildfile" value="build-resources/private/user-antbuild.properties"/>
	<property file="${private.buildfile}"/>
	<property file="build-resources/antbuild.properties"/>
	
	
	<touch file="${private.buildfile}" mkdirs="true"/>
	<fail message="${line.separator}================[ ERROR ] ==============${line.separator}
	You must specify the software.dir property in the file ${private.buildfile}${line.separator}
	If you are running eclipse you should right click on this project and hit refresh,
	so that the file appears.${line.separator}
	${line.separator}
	You should then put the following two lines in the file:${line.separator}
	software.dir=[path to place completed packages]${line.separator}
	buildnumberpath=[path to store build numbers]${line.separator}
	#Windows users should use \\ or / as path seperators.
				
				">
				<condition>
					<not>
							<isset property="software.dir"/>
					</not>
				</condition>
			</fail>
		
		<mkdir dir="${software.dir}"/>
		<mkdir dir="${buildnumberpath}"/>

		<property name="version.file" value="${ant.project.name}-version.txt"/>
		<property name="version.file.dev" value="version/${version.file}"/>

		
		
		<!-- If you don't specify a buildnumber file we will use this -->
		<property name="buildnumberpath" value="build/classes/"/>
	
	<property name="doc.buildpath" value="doc/build" />
	<property name="buildnumberfile" value="${buildnumberpath}/buildnumber-${ant.project.name}"/>

	<target name="git-status-init" description="Initialize Git variables">
		<echo>If this next call fails, it means you haven't installed git and/or it's not in your PATH</echo>
		<exec executable="git" outputproperty="git.branch">
			<arg value="rev-parse"/>
			<arg value="--abbrev-ref"/>
			<arg value="HEAD"/>
		</exec>
		
		<exec executable="git" outputproperty="git.commit">
					<arg value="rev-parse"/>
					<arg value="HEAD"/>
		</exec>
	
		<exec executable="git" outputproperty="git.shortcommit">
							<arg value="rev-parse"/>
							<arg value="--short=12"/>
							<arg value="HEAD"/>
				</exec>
	
		<exec executable="git" resultproperty="git.dirty" outputproperty="git.dirty.output">
					<arg value="diff"/>
					<arg value="--exit-code"/>
		</exec>
		<echo>Git properties loaded, branch: ${git.branch}
commit: ${git.commit}
shortcommit: ${git.shortcommit}
dirty: ${git.dirty}</echo>
		</target>
		
	
	<target name="init" description="Initialize the project directories" depends="git-status-init"> 
		<mkdir dir="build/classes/"/>
		<mkdir dir="dist"/>
		<mkdir dir="dist/doc"/>
		<mkdir dir="zip/"/>		
		<mkdir dir="${doc.buildpath}"/>
		
		<property file="${software.dir}${file.separator}aeatk-${git.branch}.latest"/>
			
		<fail unless="aeatk.location" message="${line.separator}================[ ERROR ] ==============${line.separator}You must check out and build the aeatk project on this branch (${git.branch}) first${line.separator}Expected to find file:${software.dir}${file.separator}aeatk-${git.branch}.latest${line.separator}This file should contain the location of aeatk"/> 
				
		

		<path id="compile.classpath">
			<fileset dir="lib" id="lib">
				<include name="*.jar"/>
			</fileset>
		
			<fileset dir="${aeatk.location}/" id="aeatk">
				<include name="**/*"/>
			</fileset>
			
			
		</path>	
			
	</target>
	<target name="clean">
		<delete dir="build"/>
		<delete dir="dist"/>
		<delete dir="zip/"/>
		<delete dir="${doc.buildpath}"/>
	</target>
	<target name="compile" depends="init">
		<javac srcdir="src" destdir="build/classes" debug="true">
		<classpath refid="compile.classpath"/>
		</javac>
		<path id="build.classpath">
			<path refid="compile.classpath"/>
			<path location="build/classes"/>
		</path>
	</target>
	
	
			
	
	<target name="archive" depends="compile">
		<buildnumber file="${buildnumberfile}"/>
		<property name="version.string" value="v${version.major}.${version.minor}.${version.revision}${version.beta}-${git.branch}-${build.number}"/>
		<property name="outputfilename" value="${ant.project.name}-${version.string}"/>
		<property name="version.devstring" value="v${version.major}.${version.minor}.${version.revision}dev-${git.branch}-${build.number}"/>
		<echo file="${version.file.dev}">${version.devstring} (${git.shortcommit})</echo>
		<echo file="build/classes/${version.file}">${version.string} (${git.shortcommit})</echo>
		
		
		<delete dir="dist"/>
		<mkdir dir="dist"/>
		<mkdir dir="dist/lib"/>
		<jar destfile="dist/lib/${ant.project.name}.jar" basedir="build/classes"/>
		
		<jar destfile="dist/lib/${ant.project.name}-src.jar">
					<fileset dir="src/">
						 <include name="**/*.java"/>
					</fileset>
				</jar>
			
		<copy todir="dist/" force="true">
			<fileset dir="deployables">
				<include name="*"/>
				<include name="**/"/>
			</fileset>
			<fileset dir="">
				<include name="conf/**"/>
				<exclude name="${lastdeployfile}"/>
				<!--<include name="doc/"/>-->
			</fileset>
			<!--<fileset dir="scripts">
				<include name="*"/>
			</fileset>-->
		</copy>
		
		<copy todir="dist/lib/" force="true">
			<fileset refid="lib"/>
					<!--<fileset refid="fastrf"/>-->
			<fileset refid="aeatk"/>
		</copy>
		
		<move file="dist/lib/example_scripts/" todir="dist/" force="true"/>
		<move file="dist/lib/git-hashes.tex" todir="dist/"/>
		<move file="dist/lib/git-hashes.txt" todir="dist/"/>
				
		
		
		<echo file="dist/git-hashes.txt" append="true">${ant.project.name} ${git.commit} ${git.dirty}${line.separator}</echo>
		<echo file="dist/git-hashes.tex" append="true">${ant.project.name} &amp; ${version.string} &amp; ${git.commit} &amp; ${git.dirty} \\${line.separator}\hline${line.separator}</echo>
	
		<echo>I am probably copying the lastdeployfile as well, this should be fixed one day :)</echo>
		
		<mkdir dir="dist/util"/>
		<mkdir dir="dist/patches"/>
		<mkdir dir="dist/plugins"/>
				
				
		<java classname="ca.ubc.cs.beta.aeatk.misc.bashcompletion.BashCompletion" failonerror="true" classpathref="compile.classpath" fork="true">	
			<arg value="--class"/>
			<arg value="ca.ubc.cs.beta.aeatk.smac.ValidationExecutorOptions"/>
			<arg value="--commandName"/>
			<arg value="smac-validate"/>
			<arg value="--outputFile"/>
			<arg value="dist/util/bash_autocomplete.sh"/>
		</java>
		
		<java classname="ca.ubc.cs.beta.aeatk.misc.bashcompletion.BashCompletion" failonerror="true" classpathref="compile.classpath" fork="true">	
			<arg value="--class"/>
			<arg value="ca.ubc.cs.beta.aeatk.smac.SMACOptions"/>
			<arg value="--commandName"/>
			<arg value="smac"/>
			<arg value="--outputFile"/>
			<arg value="dist/util/bash_autocomplete.sh"/>
		</java>
		
		<java classname="ca.ubc.cs.beta.aeatk.misc.bashcompletion.BashCompletion" failonerror="true" classpathref="compile.classpath" fork="true">	
			<arg value="--class"/>
			<arg value="ca.ubc.cs.beta.aeatk.example.tae.TargetAlgorithmEvaluatorRunnerOptions"/>
			<arg value="--commandName"/>
			<arg value="algo-test"/>
			<arg value="--outputFile"/>
			<arg value="dist/util/bash_autocomplete.sh"/>
		</java>
		
		<java classname="ca.ubc.cs.beta.aeatk.misc.bashcompletion.BashCompletion" failonerror="true" classpathref="compile.classpath" fork="true">	
			<arg value="--class"/>
			<arg value="ca.ubc.cs.beta.aeatk.example.satisfiabilitychecker.SatisfiabilityCheckerOptions"/>
			<arg value="--commandName"/>
			<arg value="sat-check"/>
			<arg value="--outputFile"/>
			<arg value="dist/util/bash_autocomplete.sh"/>
		</java>
		<java classname="ca.ubc.cs.beta.aeatk.misc.bashcompletion.BashCompletion" failonerror="true" classpathref="compile.classpath" fork="true">	
			<arg value="--class"/>
			<arg value="ca.ubc.cs.beta.aeatk.example.verifyscenario.VerifyScenarioOptions"/>
			<arg value="--commandName"/>
			<arg value="verify-scenario"/>
			<arg value="--outputFile"/>
			<arg value="dist/util/bash_autocomplete.sh"/>
		</java>
		<java classname="ca.ubc.cs.beta.aeatk.misc.bashcompletion.BashCompletion" failonerror="true" classpathref="compile.classpath" fork="true">	
			<arg value="--class"/>
			<arg value="ca.ubc.cs.beta.aeatk.example.statemerge.StateMergeOptions"/>
			<arg value="--commandName"/>
			<arg value="state-merge"/>
			<arg value="--outputFile"/>
			<arg value="dist/util/bash_autocomplete.sh"/>
		</java>
		
		<java classname="ca.ubc.cs.beta.aeatk.ant.execscript.ExecScriptCreator" failonerror="true" classpathref="build.classpath" fork="true">
			<arg value="--class"/>
			<arg value="ca.ubc.cs.beta.smac.executors.SMACExecutor"/>
			<arg value="--name"/>
			<arg value="smac"/>
			<arg value="--file-to-write"/>
			<arg value="dist/"/>
			<arg value="--default-mem"/>
			<arg value="1024"/>
			<arg value="--print-mem"/>
			<arg value="false"/>
		</java>
		<java classname="ca.ubc.cs.beta.aeatk.ant.execscript.ExecScriptCreator" failonerror="true" classpathref="build.classpath" fork="true">
			<arg value="--class"/>
			<arg value="ca.ubc.cs.beta.aeatk.example.tae.TargetAlgorithmEvaluatorRunner"/>
			<arg value="--name"/>
			<arg value="algo-test"/>
			<arg value="--file-to-write"/>
			<arg value="dist/"/>	
		</java>
		<java classname="ca.ubc.cs.beta.aeatk.ant.execscript.ExecScriptCreator" failonerror="true" classpathref="build.classpath" fork="true">
			<arg value="--class"/>
			<arg value="ca.ubc.cs.beta.aeatk.example.satisfiabilitychecker.SatisfiabilityChecker"/>
			<arg value="--name"/>
			<arg value="sat-check"/>
			<arg value="--file-to-write"/>
			<arg value="dist/"/>	
			<arg value="--default-mem"/>
			<arg value="1024"/>
		</java>
		<java classname="ca.ubc.cs.beta.aeatk.ant.execscript.ExecScriptCreator" failonerror="true" classpathref="build.classpath" fork="true">
			<arg value="--class"/>
			<arg value="ca.ubc.cs.beta.smac.executors.ValidatorExecutor"/>
			<arg value="--name"/>
			<arg value="smac-validate"/>
			<arg value="--file-to-write"/>
			<arg value="dist/"/>	
			<arg value="--default-mem"/>
			<arg value="1024"/>
			<arg value="--print-mem"/>
			<arg value="false"/>
		</java>
		<java classname="ca.ubc.cs.beta.aeatk.ant.execscript.ExecScriptCreator" failonerror="true" classpathref="build.classpath" fork="true">
			<arg value="--class"/>
			<arg value="ca.ubc.cs.beta.aeatk.example.statemerge.StateMergeExecutor"/>
			<arg value="--name"/>
			<arg value="state-merge"/>
			<arg value="--file-to-write"/>
			<arg value="dist/"/>	
			<arg value="--default-mem"/>
			<arg value="1024"/>
		</java>
		
		
		<java classname="ca.ubc.cs.beta.aeatk.ant.execscript.ExecScriptCreator" failonerror="true" classpathref="build.classpath" fork="true">
					<arg value="--class"/>
					<arg value="ca.ubc.cs.beta.aeatk.example.verifyscenario.VerifyScenarioExecutor"/>
					<arg value="--name"/>
					<arg value="verify-scenario"/>
					<arg value="--file-to-write"/>
					<arg value="dist/"/>	
					<arg value="--default-mem"/>
					<arg value="1024"/>
		</java>
				
				
		
		
		
						
		<chmod perm="750">
			<fileset dir="dist/">
				<include name="smac"/>
				<include name="smac-possible-restores"/>
				<include name="smac-validate"/>
				<include name="algo-test"/>
				<include name="example_scenarios/saps/ubcsat"/>
				<include name="example_scenarios/spear/Spear-32_1.2.1"/>
				<include name="util/bash_autocomplete.sh"/>
			</fileset>
		</chmod>
	</target>	
	
	
		
	<target name="zip" depends="archive,manual" description="Makes tarball for this release">
			<fail message="Cannot deploy a build for the git master branch if it is dirty, please commit all changes">
				<condition>
					<and>
					<equals arg1="${git.branch}" arg2="master" casesensitive="false" trim="true"/>
					<equals arg1="${git.dirty}" arg2="1" casesensitive="false" trim="true"/>
					</and>
				</condition>
			</fail>
			<tar destFile="${software.dir}/${outputfilename}.tar.gz" longfile="gnu" compression="gzip">
				<tarfileset dir="dist/" filemode="755" dirmode="755" prefix="${outputfilename}/">
							<include name="**/*"/>
							<exclude name="${lastdeployfile}"/> 
							<exclude name="git-hashes.tex"/>
							<exclude name="git-hashes.txt"/>
				</tarfileset>
			</tar>
		</target>
	<target name="deploy-release" depends="zip" description="untars tarball in software.dir and creates symlink">
		<untar src="${software.dir}${file.separator}${outputfilename}.tar.gz" dest="${software.dir}" compression="gzip"/>
		<propertyfile file="${software.dir}${file.separator}${ant.project.name}-${git.branch}.latest" comment="Contains location of most recent ${ant.project.name}">
		<entry key="${ant.project.name}.location" value="${software.dir}${file.separator}${outputfilename}"/>
		</propertyfile>
		<echo>Untar Successful to ${software.dir}${file.separator}${outputfilename}</echo>
	</target>
	
		
	
	<target name="deploy" depends="zip, deploy-release"/>
	
	
	
	<target name="manual" depends="setmanualprop,doc, init" description="Make Javadoc"/>
		
		<target name="setmanualprop">
			<!--<property name="build.manual" value="false"/>-->
		</target>
		
		<target name="doc" depends="manual-internal,nodoc"/>
		
		<target name="javadoc-internal"  if="build.javadoc">
			<path id="doc.classpath">
				<fileset dir="doclib" id="doclib">
					<include name="*.jar"/>
					<exclude name="*sources.jar"/>
				</fileset>
				<fileset dir="${fastrf.location}" id="fastrf">
	                <include name="fastrf.jar"/>
					<include name="fastrf-src.jar"/>
		       </fileset>
				<path refid="compile.classpath"/>
			</path>	
			<javadoc sourcepath="src/" author="true" destdir="doc/" classpathref="doc.classpath" excludepackagenames="ca.ubc.cs.beta.hal.startup,ca.ubc.cs.beta.hal" />
		</target>
		
		<target name="nodoc" unless="build.manual">
			<echo>build.manual property not set so manual will not be built. Add the following to your ${private.buildfile} to build the manual ${line.separator}build.manual=true</echo>
		</target>
		
		
	
	<target name="manual-internal" depends="init" description="Make the manual" if="build.manual">
		<copy todir="${doc.buildpath}">
			<fileset dir="doc/tex/"/>
		</copy>
		
		<copy file="dist/git-hashes.tex" todir="${doc.buildpath}" overwrite="true"/>
		
		<property file="${buildnumberfile}" prefix="manualfile" />
		<property name="build.number" value="Unknown"/>
		<property name="manual.build.number" value="${build.number}"/>
		<property name="manual.build.number" value="${manualfile.build.number}"/>
			
		<property name="doc.version.string" value="v${version.major}.${version.minor}.${version.revision}${version.beta}-${git.branch}" />
		<echo message="${doc.version.string}" file="${doc.buildpath}/version.tex"/>
		<property name="doc.version.full.string" value="v${version.major}.${version.minor}.${version.revision}${version.beta}-${git.branch}-${manual.build.number}"/>
		<echo message="${doc.version.full.string}" file="${doc.buildpath}/versionfull.tex"/>
		
		<delete>
			<!-- Delete any stray PDFs we may have created -->
			<fileset dir="${doc.buildpath}" includes="*.pdf"/>
		</delete>
		
		
		<!-- Something with the warning we generate has caused this to require forking, no idea why -->
		<!--<java classname="ca.ubc.cs.beta.aeatk.options.ConfigToLaTeX" failonerror="true" classpathref="compile.classpath" fork="true" output="${doc.buildpath}/options-ref.tex">
		</java>-->
		
		<java classname="ca.ubc.cs.beta.aeatk.options.docgen.OptionsToLaTeX" failonerror="true" classpathref="build.classpath" fork="true">
					<arg value="--class"/>
					<arg value="ca.ubc.cs.beta.aeatk.smac.SMACOptions"/>
					<arg value="--file-to-write"/>
					<arg value="${doc.buildpath}/options-basic-ref.tex"/>
					<arg value="--level"/>
					<arg value="BASIC"/>
					<arg value="--aliases"/>
					<arg value="false"/>
		</java>
				
		
		<java classname="ca.ubc.cs.beta.aeatk.options.docgen.OptionsToLaTeX" failonerror="true" classpathref="build.classpath" fork="true">
					<arg value="--class"/>
					<arg value="ca.ubc.cs.beta.aeatk.smac.SMACOptions"/>
					<arg value="--file-to-write"/>
					<arg value="${doc.buildpath}/options-ref.tex"/>	
		</java>
						
		
		
		
		<!-- We do everything twice to generate some the toc and stuff I'm sure someone else knows how to do this properly -->
		<exec dir="${doc.buildpath}" executable="pdflatex" failonerror="true">
			<arg value="manual.tex"/>
		</exec>
				
		<echo></echo>
		<echo>Manual Phase 1 Complete</echo>
		<echo></echo>
		
		<exec dir="${doc.buildpath}" executable="pdflatex" failonerror="true">
					<arg value="manual.tex"/>
		</exec>
			
		<echo></echo>
		<echo>Manual Phase 2 Complete</echo>
		<echo></echo>
		
		
		
		<exec dir="${doc.buildpath}" executable="pdflatex" failonerror="true">
			<arg value="faq.tex"/>
		</exec>
		<echo></echo>
		<echo>FAQ Phase 1 Complete</echo>
		<echo></echo>
		
		
		<exec dir="${doc.buildpath}" executable="pdflatex" failonerror="true">
					<arg value="faq.tex"/>
		</exec>
		<echo></echo>
		<echo>FAQ Phase 2 Complete</echo>
		<echo></echo>
		<!--	
		<exec dir="${doc.buildpath}" executable="pdflatex" failonerror="true">
					<arg value="quickstart.tex"/>
		</exec>
		<echo></echo>
		<echo>Quickstart Phase 1 Complete</echo>
		<echo></echo>
		
		<exec dir="${doc.buildpath}" executable="pdflatex" failonerror="true">
					<arg value="quickstart.tex"/>
		</exec>
		
		<echo></echo>
		<echo>Quickstart Phase 2 Complete</echo>
		<echo></echo>
		-->
		
		<!-- For some reason a file-formats.pdf gets built we will nuke it -->
		<delete file="${doc.buildpath}/file-formats.pdf" failonerror="true"/>
		<delete file="${doc.buildpath}/githashes.pdf" failonerror="true"/>
		
		
		<copy todir="dist/doc" force="true">
		<fileset dir="doc/build/">
			<include name="*.pdf"/>
		</fileset>
		</copy>
		<loadfile property="quickstart.footer" srcFile="doc/text/quickstart_footer.txt"/>
		<loadfile property="quickstart.header" srcFile="doc/text/quickstart_header.txt"/>
		<echo file="dist/doc/quickstart.html">
${quickstart.header}

 wget http://www.cs.ubc.ca/labs/beta/Projects/SMAC/${outputfilename}.tar.gz
 tar -xzvf ${outputfilename}.tar.gz
 cd ${outputfilename}

${quickstart.footer}
</echo>
	</target>	

	
</project>
