<?xml version="1.0"?>
<project name="SMAC" default="compile">
	<description>
		Sequential Model-based Automatic Configurator
	</description>
	<property name="private.buildfile" value="build-resources/private/user-antbuild.properties"/>
	<property file="${private.buildfile}"/>
	<property file="build-resources/antbuild.properties"/>
	
	<!-- If you don't specify a buildnumber file we will use this -->
		<property name="buildnumberpath" value="build/classes/"/>
	
	<property name="version.file.dev" value="version/${version.file}"/>
	
	
	
	<property name="doc.buildpath" value="doc/build" />
	<property name="buildnumberfile" value="${buildnumberpath}/buildnumber-${ant.project.name}"/>
	<fail message="No Software Directory specified, a private build file should exist in ${private.buildfile} this should specify at the very least 'software.dir'">
		<condition>
			<not>
					<isset property="software.dir"/>
			</not>
		</condition>
	</fail>
	
	
	
	<!--<property name="software.dir" value="/ubc/cs/home/s/seramage/arrowspace/software/"/>-->

	
	<target name="get-git-branch"> 
			<exec executable="git" outputproperty="git.branch">
				<arg value="rev-parse"/>
				<arg value="--abbrev-ref"/>
				<arg value="HEAD"/>
			</exec>
			<echo>${git.branch}</echo>
	</target>
		
	
	<target name="init" description="Initialize the project directories" depends="get-git-branch"> 
		<mkdir dir="build/classes/"/>
		<mkdir dir="dist"/>
		<mkdir dir="dist/doc"/>
				
		<mkdir dir="${doc.buildpath}"/>
		

		<path id="compile.classpath">
			<fileset dir="lib" id="lib">
				<include name="*.jar"/>
			</fileset>
			<!--<fileset dir="${software.dir}/fastrf/" id="fastrf">
				<include name="fastrf.jar"/>
			</fileset>-->
			<fileset dir="${software.dir}/aclib-${git.branch}/" id="aclib">
				<include name="*.jar"/>
			</fileset>
		</path>	
			
	</target>
	<target name="clean">
		<delete dir="build"/>
		<delete dir="dist"/>
		<delete dir="${doc.buildpath}"/>
	</target>
	<target name="compile" depends="init">
		<javac srcdir="src" destdir="build/classes" debug="true">
		<classpath refid="compile.classpath"/>
		</javac>
		
		
	</target>
	
	
			
	
	<target name="archive" depends="compile, manual, get-git-branch">
		<buildnumber file="${buildnumberfile}"/>
		<property name="version.string" value="v${version.major}.${version.minor}.${version.revision}${version.beta}-${git.branch}-${build.number}"/>
		<property name="outputfilename" value="smac-${version.string}"/>
		<property name="version.devstring" value="v${version.major}.${version.minor}.${version.revision}dev-${git.branch}-${build.number}"/>
		<echo file="${version.file.dev}">${version.devstring}</echo>
		<echo file="build/classes/${version.file}">${version.string}</echo>
		
		
		<delete dir="dist"/>
		<mkdir dir="dist"/>
		<jar destfile="dist/smac.jar" basedir="build/classes"/>
		
		<jar destfile="dist/smac-src.jar">
					<fileset dir="src/">
						 <include name="**/*.java"/>
					</fileset>
				</jar>
			
		<copy todir="dist/" force="true">
			
			<fileset dir="deployables">
				<include name="*"/>
				<include name="**/"/>
			</fileset>
			<fileset dir="">
				<include name="conf/**"/>
				<exclude name="${lastdeployfile}"/>
				<!--<include name="doc/"/>-->
			</fileset>
			<fileset refid="lib"/>
			<!--<fileset refid="fastrf"/>-->
			<fileset refid="aclib"/>
			<fileset dir="scripts">
				<include name="*"/>
			</fileset>
		</copy>
		 
		<copy todir="dist/doc" force="true">
		<fileset dir="doc/build/">
			<include name="*.pdf"/>
		</fileset>
		</copy>
		<echo>I am probably copying the lastdeployfile as well, this should be fixed one day :)</echo>
		<chmod perm="750">
			<fileset dir="dist/">
				<include name="smac"/>
				<include name="smac-possible-restores"/>
				<include name="smac-validate"/>
				<include name="example_saps/ubcsat"/>
				<include name="example_spear/Spear-32_1.2.1"/>
			</fileset>
		</chmod>
	</target>	
	
	<target name="zip" depends="archive" description="Makes tarball for this release">

		<tar destFile="${software.dir}/${outputfilename}.tar.gz" longfile="gnu" compression="gzip">
					<tarfileset dir="dist/" filemode="640" dirmode="750" prefix="${outputfilename}/">
						<include name="**/*"/>
						<exclude name="${lastdeployfile}"/> <!--The previous exclude didn't work so maybe try here-->
						<exclude name="smac"/>
						<exclude name="smac-possible-restores"/>
						<exclude name="smac-validate"/>
						<exclude name="example_saps/ubcsat"/>
						<exclude name="example_spear/Spear-32_1.2.1"/>
					</tarfileset>
					<tarfileset dir="dist/" filemode="750" prefix="${outputfilename}/">
						<include name="smac"/>
						<include name="smac-possible-restores"/>
						<include name="smac-validate"/>
						<include name="example_saps/ubcsat*"/>
						<include name="example_spear/Spear-32_1.2.1*"/>
					</tarfileset>
		</tar>
	</target>
	
	<target name="deploy-release" depends="archive" description="untars tarball in software.dir and creates symlink">
	
		<exec executable="tar" dir="${software.dir}" failonerror="true">
			<arg value="-xzf"/>
			<arg value="${software.dir}/${outputfilename}.tar.gz"/>
		</exec>
		
		<echo file="${lastdeployfile}" append="false">${software.dir}/${outputfilename}</echo>
			
		<symlink link="${deploy.dir}-${git.branch}" overwrite="true" resource="${software.dir}/smac-${version.string}" failonerror="false"/>
		<echo>Untar Successful to ${software.dir}/${outputfilename}</echo>
	</target>
	<target name="deploy" depends="zip, deploy-release"/>
	
	
	
	<target name="manual" depends="init" description="Make the manual">
		<copy todir="${doc.buildpath}">
			<fileset dir="doc/tex/"/>
		</copy>
		
		<property file="${buildnumberfile}" prefix="manual" />

		<property name="doc.version.string" value="v${version.major}.${version.minor}.${version.revision}${version.beta}-${git.branch}" />
		<echo message="${doc.version.string}" file="${doc.buildpath}/version.tex"/>
		<property name="doc.version.full.string" value="v${version.major}.${version.minor}.${version.revision}${version.beta}-${git.branch}-${manual.build.number}"/>
		<echo message="${doc.version.full.string}" file="${doc.buildpath}/versionfull.tex"/>
		
		
		<java classname="ca.ubc.cs.beta.aclib.options.ConfigToLaTeX" failonerror="true" classpathref="compile.classpath" output="${doc.buildpath}/options-ref.tex">
		</java>
		<!-- We do everything twice to generate some the toc and stuff I'm sure someone else knows how to do this properly -->
					
		<exec dir="${doc.buildpath}" executable="pdflatex" failonerror="true">
			<arg value="faq.tex"/>
		</exec>
		<echo></echo>
		<echo>FAQ Phase 1 Complete</echo>
		<echo></echo>
		
		
		<exec dir="${doc.buildpath}" executable="pdflatex" failonerror="true">
					<arg value="faq.tex"/>
		</exec>
		<echo></echo>
		<echo>FAQ Phase 2 Complete</echo>
		<echo></echo>
			
		<exec dir="${doc.buildpath}" executable="pdflatex" failonerror="true">
					<arg value="quickstart.tex"/>
		</exec>
		<echo></echo>
		<echo>Quickstart Phase 1 Complete</echo>
		<echo></echo>
		
		<exec dir="${doc.buildpath}" executable="pdflatex" failonerror="true">
					<arg value="quickstart.tex"/>
		</exec>
		
		<echo></echo>
		<echo>Quickstart Phase 2 Complete</echo>
		<echo></echo>
		
		<exec dir="${doc.buildpath}" executable="pdflatex" failonerror="true">
					<arg value="manual.tex"/>
		</exec>
		
		<echo></echo>
		<echo>Manual Phase 1 Complete</echo>
		<echo></echo>
		
		<exec dir="${doc.buildpath}" executable="pdflatex" failonerror="true">
					<arg value="manual.tex"/>
		</exec>
			
		<echo></echo>
		<echo>Manual Phase 1 Complete</echo>
		<echo></echo>
		
		<!-- For some reason a file-formats.pdf gets built we will nuke it -->
		<delete file="${doc.buildpath}/file-formats.pdf" failonerror="true"/>
		
	</target>	

	
</project>
